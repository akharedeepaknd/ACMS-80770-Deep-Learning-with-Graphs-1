probs_unnorm = probs_unnorm/sum(probs_unnorm)
z[i] = sample(1:(C+m), 1, replace=TRUE, prob=probs_unnorm)
if (z[i] > C) {
thetas = c(thetas, thetas_m[z[i]-C])
z[i] = C = C + 1
}
}
for (c in 1:C) {
thetas[c] = m_post(1, X[z==c])
}
z_reps[rep, ] = z
}
return(list(
C=C,
thetas=thetas,
z=z_reps
))
}
X = GMM(10, c(-3, -1, 1, 3), c(1/4, 1/4, 1/4, 1/4))
hist(X)
ret = MFM(X)
hist(ret$z)
hist(X, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
ylim=c(0,1),
xlab = "temp",
main = paste("Hist with", ret$C, "clusters"),
breaks=20)
MFM = function(X) {
n = length(X)
m0 = 0
v0 = 1
v = 1
m = 4
C = 1
N = 1000
V = rep(0, n)
for (i in 0:n) {
V[i] = Vnt(n, i, 3)
}
thetas = c(rnorm(1, m0, sqrt(s0)))
z = rep(1, n)
z_reps = matrix(0, N, n)
m_post = function(ss, xs){
n = length(xs)
rnorm(ss, (m0 / v0 + sum(xs)/v)/(1/v0 + n/v), sqrt(1/(1/v0 + n/v)))
}
for (rep in 1:N) {
for (i in 1:n) {
t = length(unique(z[-i]))
# if unique, let's reassign
if (t + 1 == C) {
thetas = thetas[-z[i]]
C = C - 1
}
probs_unnorm = rep(0, C + m)
for (c in 1:C) {
probs_unnorm[c] = (sum(z[-i]==c) + 1) * dnorm(X[i], thetas[c])
}
thetas_m = rnorm(m, m0, sqrt(s0))
for (r in 1:m) {
t = length(unique(z[-i]))
const = V[t+1]/V[t]
probs_unnorm[C + r] = const / m * dnorm(X[i], thetas_m[r])
}
probs_unnorm = probs_unnorm/sum(probs_unnorm)
z[i] = sample(1:(C+m), 1, replace=TRUE, prob=probs_unnorm)
if (z[i] > C) {
thetas = c(thetas, thetas_m[z[i]-C])
z[i] = C = C + 1
}
}
for (c in 1:C) {
thetas[c] = m_post(1, X[z==c])
}
z_reps[rep, ] = z
}
return(list(
C=C,
thetas=thetas,
z=z_reps
))
}
X = GMM(10, c(-3, -1, 1, 3), c(1/4, 1/4, 1/4, 1/4))
hist(X)
ret = MFM(X)
hist(ret$z)
hist(X, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
ylim=c(0,1),
xlab = "temp",
main = paste("Hist with", ret$C, "clusters"),
breaks=20)
for (c in 1:ret$C) {
x<-seq(min(X), max(X), length=40)
y<-dnorm(x, mean=ret$thetas[c], sd=v)
lines(x, y,# density plot
lwd = 2, # thickness of line
col = "chocolate3")
}
hist(apply(ret$z,1,function(x) length(unique(x))))
head(V)
Vnt(100, 1, 3)
Vnt(100, 1, 3)/Vnt(100, 0, 3)
Vnt(100, 2, 3)/Vnt(100, 1, 3)
Vnt(100, 3, 3)/Vnt(100, 2, 3)
Vnt(100, 4, 3)/Vnt(100, 3, 3)
Vnt(1000, 4, 3)/Vnt(1000, 3, 3)
MFM = function(X) {
n = length(X)
m0 = 0
v0 = 1
v = 1
m = 4
C = 1
N = 1000
V = rep(0, n)
Gamma = 3
for (i in 0:n) {
V[i] = Vnt(n, i, Gamma)
}
thetas = c(rnorm(1, m0, sqrt(s0)))
z = rep(1, n)
z_reps = matrix(0, N, n)
m_post = function(ss, xs){
n = length(xs)
rnorm(ss, (m0 / v0 + sum(xs)/v)/(1/v0 + n/v), sqrt(1/(1/v0 + n/v)))
}
for (rep in 1:N) {
for (i in 1:n) {
t = length(unique(z[-i]))
# if unique, let's reassign
if (t + 1 == C) {
thetas = thetas[-z[i]]
C = C - 1
}
probs_unnorm = rep(0, C + m)
for (c in 1:C) {
probs_unnorm[c] = (sum(z[-i]==c) + Gamma) * dnorm(X[i], thetas[c])
}
thetas_m = rnorm(m, m0, sqrt(s0))
for (r in 1:m) {
t = length(unique(z[-i]))
const = Gamma * V[t+1]/V[t]
probs_unnorm[C + r] = const / m * dnorm(X[i], thetas_m[r])
}
probs_unnorm = probs_unnorm/sum(probs_unnorm)
z[i] = sample(1:(C+m), 1, replace=TRUE, prob=probs_unnorm)
if (z[i] > C) {
thetas = c(thetas, thetas_m[z[i]-C])
z[i] = C = C + 1
}
}
for (c in 1:C) {
thetas[c] = m_post(1, X[z==c])
}
z_reps[rep, ] = z
}
return(list(
C=C,
thetas=thetas,
z=z_reps
))
}
X = GMM(10, c(-3, -1, 1, 3), c(1/4, 1/4, 1/4, 1/4))
hist(X)
ret = MFM(X)
hist(ret$z)
hist(X, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
ylim=c(0,1),
xlab = "temp",
main = paste("Hist with", ret$C, "clusters"),
breaks=20)
for (c in 1:ret$C) {
x<-seq(min(X), max(X), length=40)
y<-dnorm(x, mean=ret$thetas[c], sd=v)
lines(x, y,# density plot
lwd = 2, # thickness of line
col = "chocolate3")
}
hist(apply(ret$z,1,function(x) length(unique(x))))
X = GMM(1000, c(-3, -1, 1, 3), c(1/4, 1/4, 1/4, 1/4))
hist(X)
ret = MFM(X)
hist(ret$z)
hist(X, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
ylim=c(0,1),
xlab = "temp",
main = paste("Hist with", ret$C, "clusters"),
breaks=20)
for (c in 1:ret$C) {
x<-seq(min(X), max(X), length=40)
y<-dnorm(x, mean=ret$thetas[c], sd=v)
lines(x, y,# density plot
lwd = 2, # thickness of line
col = "chocolate3")
}
hist(apply(ret$z,1,function(x) length(unique(x))))
5!
factorial()
factorial(5)/factorial(3)
fact = function(x,m){
factorial(x)/factorial(x-m)
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(1000,1,3)
Vnt(1000,3,1)
Vnt(100,3,1)
Vnt(10,3,1)
fact = function(x,m){
v = 1
for (i in 1:m) {
v = v * (x - i + 1)
}
v
}
fact(5,2)
fact = function(x,m){
v = 1
for (i in 1:m) {
v = v * (x - i + 1)
}
v
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(100, 2,1)
Vnt(1000, 2,1)
Vnt(1000, 2,1)/Vnt(1000, 1,1)
Vnt(1000, 2,1)
Vnt(1000, 1,1)
Vnt(1000, 0,1)
Vnt(1000, 4,1)
Vnt(1000, 5,1)
Vnt(10, 5,1)
Vnt = function(n, t, g) {
s = 0
for (k in 0:100) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
fact = function(x,m){
v = 1
for (i in 1:m) {
v = v * (x - i + 1)
}
v
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(10, 5,1)
Vnt(13, 5,1)
Vnt(13, 5, 9)
Vnt(13, 5, 0.1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:10000) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(13, 5, 0.1)
Vnt(13, 5, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:10000) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(13, 5, 1)
Vnt(100, 5, 1)
Vnt(1000, 5, 1)
fact(1000,2)
Vnt = function(n, t, g) {
s = 0
for (k in 1:10000) {
s = s+ n * fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(1000, 5, 1)
Vnt(10, 5, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:10000) {
s = s+ n * fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(10, 5, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
print(fact(k,t) / fact(k*g+n-1,n) * pk(k))
s = s+ n * fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(10, 5, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ n^n * fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(10, 5, 1)
Vnt(10, 5, 1)/Vnt(10, 4, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(10, 5, 1)/Vnt(10, 4, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ n^n * fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(1000, 5, 1)/Vnt(1000, 4, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ n^100 * fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ n^100 * fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(1000, 5, 1)/Vnt(1000, 4, 1)
fact(10*1+1000-1,1000)
fact = function(x,m,c){
v = c
for (i in 1:m) {
v = v * (x - i + 1)
}
v
}
fact(10*1+1000-1,1000)
fact(10*1+1000-1,1000, 0.00001)
Vnt(1000, 5, 1)/Vnt(1000, 4, 1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ fact(k,t,1) / fact(k*g+n-1,n, pk(k))
}
return(s)
}
Vnt(1000, 5, 1)/Vnt(1000, 4, 1)
fact = function(x,m){
v = 1
for (i in 1:m) {
v = v * (x - i + 1)
}
v
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt2 = function(n, t, g) {
if (n < 10) Vnt(n, t, g)
return(Vnt2(n-1, t-1)/g - ((n-1)/g + t - 1)*Vnt2(n, t-1))
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:100) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt2(1,1,1)
Vnt2 = function(n, t, g) {
if (n < 10) Vnt(n, t, g)
return(Vnt2(n-1, t-1, g)/g - ((n-1)/g + t - 1)*Vnt2(n, t-1, g))
}
Vnt2(1,1,1)
Vnt2 = function(n, t, g) {
if (n < 10) return(Vnt(n, t, g))
return(Vnt2(n-1, t-1, g)/g - ((n-1)/g + t - 1)*Vnt2(n, t-1, g))
}
Vnt2(1,1,1)
Vnt2(10,1,1)
Vnt2 = function(n, t, g) {
if (n < 10 || t < 10) return(Vnt(n, t, g))
return(Vnt2(n-1, t-1, g)/g - ((n-1)/g + t - 1)*Vnt2(n, t-1, g))
}
Vnt2(10,1,1)
Vnt2(100,1,1)
Vnt2(1000,1,1)
Vnt2(1000,4,1)/
Vnt2(1000,3,1)
Vnt(1000,4,1)/Vnt2(1000,4,1)
Vnt(1000,4,1)/Vnt2(1000,3,1)
Vnt(1000,4,1)/Vnt(1000,3,1)
Vnt = function(n, t, g) {
s = 0
for (k in 1:1000) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(1000,4,1)/Vnt(1000,3,1)
Vnt(1000,3,1)
Vnt(1000,3,2)
Vnt(1000,4,1)/Vnt(1000,3,2)
Vnt(100,4,1)/Vnt(100,3,2)
Vnt(200,4,1)/Vnt(200,3,2)
Vnt(100,4,1)/Vnt(100,3,1)
Vnt(150,4,1)/Vnt(150,3,1)
Vnt(190,4,1)/Vnt(190,3,1)
Vnt(180,4,1)/Vnt(180,3,1)
Vnt(170,4,1)/Vnt(170,3,1)
Vnt(160,4,1)/Vnt(160,3,1)
Vnt(160,4,1)/Vnt(160,3,1)
Vnt(160,3,1)
Vnt(160,4,1)
1e-2
v=3
1e-v
10^v
0.1^v
Vnt = function(n, t, g) {
s = 0
for (k in 1:1000) {
s = s+ fact(k,t,d) / fact(k*g+n-1,n,d) * pk(k)
}
return(s)
}
1e-3000
fact = function(x,m,d){
v = 12
for (i in 1:m) {
v = v * (x - i + 1)
}
v
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:1000) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
fact = function(x,m,d){
v = 1
for (i in 1:m) {
v = v * (x - i + 1)
}
v
}
Vnt = function(n, t, g) {
s = 0
for (k in 1:1000) {
s = s+ fact(k,t) / fact(k*g+n-1,n) * pk(k)
}
return(s)
}
Vnt(10,4,1)/Vnt(10,3,1)
Vnt(11,4,1)/Vnt(11,3,1)
Vnt(12,4,1)/Vnt(12,3,1)
Vnt(100,4,1)/Vnt(100,3,1)
Vnt(120,4,1)/Vnt(120,3,1)
Vnt(200,4,1)/Vnt(200,3,1)
Vnt(200,3,1)
Vnt(200,4,1)
Vnt(121,4,1)/Vnt(121,3,1)
Vnt(122,4,1)/Vnt(122,3,1)
Vnt(123,4,1)/Vnt(123,3,1)
Vnt(123,4,0.5)/Vnt(123,3,0.5)
Vnt(1230,4,0.5)/Vnt(1230,3,0.5)
Vnt(500,4,0.5)/Vnt(500,3,0.5)
